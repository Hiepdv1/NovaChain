// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package dbutxo

import (
	"context"

	"github.com/google/uuid"
)

const createUTXO = `-- name: CreateUTXO :one
INSERT INTO utxos (
    tx_id, output_index, value, pub_key_hash, block_id
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, tx_id, output_index, value, pub_key_hash, block_id
`

type CreateUTXOParams struct {
	TxID        string
	OutputIndex int64
	Value       string
	PubKeyHash  string
	BlockID     string
}

func (q *Queries) CreateUTXO(ctx context.Context, arg CreateUTXOParams) (Utxo, error) {
	row := q.db.QueryRowContext(ctx, createUTXO,
		arg.TxID,
		arg.OutputIndex,
		arg.Value,
		arg.PubKeyHash,
		arg.BlockID,
	)
	var i Utxo
	err := row.Scan(
		&i.ID,
		&i.TxID,
		&i.OutputIndex,
		&i.Value,
		&i.PubKeyHash,
		&i.BlockID,
	)
	return i, err
}

const deleteUTXO = `-- name: DeleteUTXO :exec
DELETE FROM utxos
WHERE tx_id = $1 AND output_index = $2
`

type DeleteUTXOParams struct {
	TxID        string
	OutputIndex int64
}

func (q *Queries) DeleteUTXO(ctx context.Context, arg DeleteUTXOParams) error {
	_, err := q.db.ExecContext(ctx, deleteUTXO, arg.TxID, arg.OutputIndex)
	return err
}

const deleteUTXOsByBlock = `-- name: DeleteUTXOsByBlock :exec
DELETE FROM utxos
WHERE block_id = $1
`

func (q *Queries) DeleteUTXOsByBlock(ctx context.Context, blockID string) error {
	_, err := q.db.ExecContext(ctx, deleteUTXOsByBlock, blockID)
	return err
}

const getUTXOByID = `-- name: GetUTXOByID :one
SELECT id, tx_id, output_index, value, pub_key_hash, block_id FROM utxos
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUTXOByID(ctx context.Context, id uuid.UUID) (Utxo, error) {
	row := q.db.QueryRowContext(ctx, getUTXOByID, id)
	var i Utxo
	err := row.Scan(
		&i.ID,
		&i.TxID,
		&i.OutputIndex,
		&i.Value,
		&i.PubKeyHash,
		&i.BlockID,
	)
	return i, err
}

const getUTXOByPubKeyHash = `-- name: GetUTXOByPubKeyHash :one
SELECT id, tx_id, output_index, value, pub_key_hash, block_id FROM utxos
WHERE pub_key_hash = $1
ORDER BY value DESC
LIMIT 1
`

func (q *Queries) GetUTXOByPubKeyHash(ctx context.Context, pubKeyHash string) (Utxo, error) {
	row := q.db.QueryRowContext(ctx, getUTXOByPubKeyHash, pubKeyHash)
	var i Utxo
	err := row.Scan(
		&i.ID,
		&i.TxID,
		&i.OutputIndex,
		&i.Value,
		&i.PubKeyHash,
		&i.BlockID,
	)
	return i, err
}

const getUTXOByTxIDAndOut = `-- name: GetUTXOByTxIDAndOut :one
SELECT id, tx_id, output_index, value, pub_key_hash, block_id FROM utxos
WHERE tx_id = $1 AND output_index = $2
LIMIT 1
`

type GetUTXOByTxIDAndOutParams struct {
	TxID        string
	OutputIndex int64
}

func (q *Queries) GetUTXOByTxIDAndOut(ctx context.Context, arg GetUTXOByTxIDAndOutParams) (Utxo, error) {
	row := q.db.QueryRowContext(ctx, getUTXOByTxIDAndOut, arg.TxID, arg.OutputIndex)
	var i Utxo
	err := row.Scan(
		&i.ID,
		&i.TxID,
		&i.OutputIndex,
		&i.Value,
		&i.PubKeyHash,
		&i.BlockID,
	)
	return i, err
}

const getUTXOByTxOut = `-- name: GetUTXOByTxOut :one
SELECT id, tx_id, output_index, value, pub_key_hash, block_id FROM utxos
WHERE tx_id = $1 AND output_index = $2 LIMIT 1
`

type GetUTXOByTxOutParams struct {
	TxID        string
	OutputIndex int64
}

func (q *Queries) GetUTXOByTxOut(ctx context.Context, arg GetUTXOByTxOutParams) (Utxo, error) {
	row := q.db.QueryRowContext(ctx, getUTXOByTxOut, arg.TxID, arg.OutputIndex)
	var i Utxo
	err := row.Scan(
		&i.ID,
		&i.TxID,
		&i.OutputIndex,
		&i.Value,
		&i.PubKeyHash,
		&i.BlockID,
	)
	return i, err
}

const getUTXOsByPubKeyHash = `-- name: GetUTXOsByPubKeyHash :many
SELECT id, tx_id, output_index, value, pub_key_hash, block_id FROM utxos
WHERE pub_key_hash = $1
ORDER BY value DESC
`

func (q *Queries) GetUTXOsByPubKeyHash(ctx context.Context, pubKeyHash string) ([]Utxo, error) {
	rows, err := q.db.QueryContext(ctx, getUTXOsByPubKeyHash, pubKeyHash)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Utxo
	for rows.Next() {
		var i Utxo
		if err := rows.Scan(
			&i.ID,
			&i.TxID,
			&i.OutputIndex,
			&i.Value,
			&i.PubKeyHash,
			&i.BlockID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUTXOsByTxID = `-- name: GetUTXOsByTxID :many
SELECT id, tx_id, output_index, value, pub_key_hash, block_id FROM utxos
WHERE tx_id = $1
ORDER BY output_index
`

func (q *Queries) GetUTXOsByTxID(ctx context.Context, txID string) ([]Utxo, error) {
	rows, err := q.db.QueryContext(ctx, getUTXOsByTxID, txID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Utxo
	for rows.Next() {
		var i Utxo
		if err := rows.Scan(
			&i.ID,
			&i.TxID,
			&i.OutputIndex,
			&i.Value,
			&i.PubKeyHash,
			&i.BlockID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
