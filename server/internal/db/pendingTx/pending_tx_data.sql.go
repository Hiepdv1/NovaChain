// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: pending_tx_data.sql

package dbPendingTx

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

const insertPendingTxData = `-- name: InsertPendingTxData :one
INSERT INTO pending_tx_data (raw_tx, pub_key_hash, tx_ref)
VALUES ($1, $2, $3)
RETURNING pending_id, tx_ref, raw_tx, pub_key_hash
`

type InsertPendingTxDataParams struct {
	RawTx      json.RawMessage
	PubKeyHash string
	TxRef      uuid.UUID
}

func (q *Queries) InsertPendingTxData(ctx context.Context, arg InsertPendingTxDataParams) (PendingTxDatum, error) {
	row := q.db.QueryRowContext(ctx, insertPendingTxData, arg.RawTx, arg.PubKeyHash, arg.TxRef)
	var i PendingTxDatum
	err := row.Scan(
		&i.PendingID,
		&i.TxRef,
		&i.RawTx,
		&i.PubKeyHash,
	)
	return i, err
}

const selectPendingDataTxByTxRef = `-- name: SelectPendingDataTxByTxRef :one
SELECT pending_id, tx_ref, raw_tx, pub_key_hash FROM pending_tx_data
WHERE tx_ref = $1 LIMIT 1
`

func (q *Queries) SelectPendingDataTxByTxRef(ctx context.Context, txRef uuid.UUID) (PendingTxDatum, error) {
	row := q.db.QueryRowContext(ctx, selectPendingDataTxByTxRef, txRef)
	var i PendingTxDatum
	err := row.Scan(
		&i.PendingID,
		&i.TxRef,
		&i.RawTx,
		&i.PubKeyHash,
	)
	return i, err
}

const selectPendingTxByPubKeyHash = `-- name: SelectPendingTxByPubKeyHash :one
SELECT ptd.pending_id, ptd.tx_ref, ptd.raw_tx, ptd.pub_key_hash
FROM pending_tx_data ptd
JOIN pending_transactions pt ON pt.tx_id = ptd.tx_id
WHERE ptd.pub_key_hash = $1
`

func (q *Queries) SelectPendingTxByPubKeyHash(ctx context.Context, pubKeyHash string) (PendingTxDatum, error) {
	row := q.db.QueryRowContext(ctx, selectPendingTxByPubKeyHash, pubKeyHash)
	var i PendingTxDatum
	err := row.Scan(
		&i.PendingID,
		&i.TxRef,
		&i.RawTx,
		&i.PubKeyHash,
	)
	return i, err
}
